@page "/notes/{Id}"
@inject HttpClient Http
@using Models

@using Markdig
@using Serilog

@inject MarkdownPipeline Pipeline

<div class="container slide-left-animated">
    @if (blog == null)
    {
        <p><i class="fa fa-spinner" aria-hidden="true"></i></p>
    }
    else
    {
        <NavLink class="nav-link" href="projects">
            <span class="oi oi-arrow-thick-left" aria-hidden="true">Back to Projects</span>
        </NavLink>

        <div>
            <h4>@blog.Title</h4>
        </div>

        <div class="row" style="height: 600px;">
            <div class="card col-sm-12">
                @((MarkupString)HtmlToRender)
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    private string url;
    Blogg blog;

    protected override async Task OnInitializedAsync()
    {

        url = ApiHelper.apiBlog + Id;
        blog = await Http.GetFromJsonAsync<Blogg>(url);
    }

    private string _html = string.Empty;
    public string HtmlToRender
    {
        get
        {
            try
            {
                _html = Markdown.ToHtml(blog.Markdown ?? string.Empty, Pipeline);
                return _html;
            }
            catch (NullReferenceException nrx)
            {
                Log.Error(nrx, "Couldn't render markdown text");
            }

            return _html;
        }
    }

}